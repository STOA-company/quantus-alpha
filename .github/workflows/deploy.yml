name: Deploy Service

on:
  pull_request:
    types: [closed]
    branches:
      - staging
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
      clean_cache:
        description: 'Clean pip/poetry cache'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Set PR Title
        run: |
          if [ "${{ github.event.pull_request.title }}" != "" ]; then
            PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | head -n 1)
            echo "PR_TITLE=${PR_TITLE}" >> $GITHUB_ENV
          else
            echo "PR_TITLE=Manual deployment" >> $GITHUB_ENV
          fi

      - name: Notify Slack - Deployment Started
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "#FFA500",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":rocket: *Deployment Started*\n*Title:* ${{ env.PR_TITLE || github.event.pull_request.title || 'Manual deployment' }}\n*Env:* ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || github.base_ref || github.ref_name }}\n*Triggered by:* ${{ github.actor }}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Determine environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "CLEAN_CACHE=${{ github.event.inputs.clean_cache }}" >> $GITHUB_ENV
          elif [ "${{ github.base_ref }}" == "staging" ] || [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "CLEAN_CACHE=false" >> $GITHUB_ENV
          elif [ "${{ github.base_ref }}" == "dev" ] || [ "${{ github.ref }}" == "refs/heads/dev" ]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "CLEAN_CACHE=false" >> $GITHUB_ENV
          else
            echo "Unsupported branch for deployment"
            exit 1
          fi

      - name: Set environment-specific variables
        id: set-env-vars
        run: |
          if [ "${{ env.ENVIRONMENT }}" == "staging" ]; then
            echo "SERVER_HOST=${{ secrets.STAGING_SERVER_HOST }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.STAGING_SSH_USER }}" >> $GITHUB_ENV
            echo "ssh_key=STAGING_SSH_PRIVATE_KEY" >> $GITHUB_OUTPUT
          else  # default to dev
            echo "SERVER_HOST=${{ secrets.DEV_SERVER_HOST }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.DEV_SSH_USER }}" >> $GITHUB_ENV
            echo "ssh_key=DEV_SSH_PRIVATE_KEY" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'false'
          fetch-depth: 0

      - name: Set up SSH for DEV environment
        if: env.ENVIRONMENT == 'dev'
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}

      - name: Set up SSH for STAGING environment
        if: env.ENVIRONMENT == 'staging'
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

      - name: Install SSH dependencies
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          echo "SSH setup completed"

      - name: Debug connection
        run: |
          echo "Attempting to connect to ${{ env.SERVER_HOST }} as ${{ env.SSH_USER }}"
          ssh -v ${{ env.SSH_USER }}@${{ env.SERVER_HOST }} "echo Connection successful"

      - name: Notify Slack - Deployment In Progress
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "#3498DB",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":gear: *Deployment In Progress*\n*Title:* ${{ env.PR_TITLE || github.event.pull_request.title || 'Manual deployment' }}\n*Env:* ${{ env.ENVIRONMENT }}\n*Branch:* ${{ github.base_ref || github.ref_name }}\n*Executing:* ./scripts/service-deploy.sh ${{ env.ENVIRONMENT }} ${{ env.CLEAN_CACHE }}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Deploy to Server
        id: deploy
        run: |
          echo "Deploying to ${{ env.ENVIRONMENT }} environment on ${{ env.SERVER_HOST }}"
          TARGET_BRANCH="${{ github.base_ref || github.ref_name }}"

          # 스크립트 실행 시간 측정 시작
          START_TIME=$(date +%s)

          # 배포 스크립트 실행 및 출력 캡처
          LOG_FILE="/tmp/deployment_log.txt"
          if ssh -v ${{ env.SSH_USER }}@${{ env.SERVER_HOST }} "cd ~/quantus-alpha && git checkout ${TARGET_BRANCH} && git pull origin ${TARGET_BRANCH} && ./scripts/service-deploy.sh ${{ env.ENVIRONMENT }} ${{ env.CLEAN_CACHE }}" 2>&1 | tee $LOG_FILE; then
            DEPLOY_STATUS="success"
          else
            DEPLOY_STATUS="failure"
            # 로그 추출
            LAST_LINES=$(tail -n 20 $LOG_FILE)
            echo "error_log<<EOF" >> $GITHUB_OUTPUT
            echo "$LAST_LINES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          # 실행 시간 계산
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "duration=${DURATION}s" >> $GITHUB_OUTPUT

          # 실패 시 종료 코드 1로 종료
          if [ "$DEPLOY_STATUS" = "failure" ]; then
            echo "Deployment failed. Check logs for details."
            exit 1
          fi

      - name: Notify Slack - Deployment Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "good",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":white_check_mark: *Deployment Successful*\n*Title:* ${{ env.PR_TITLE || github.event.pull_request.title || 'Manual deployment' }}\n*Env:* ${{ env.ENVIRONMENT }}\n*Branch:* ${{ github.base_ref || github.ref_name }}\n*Deployed by:* ${{ github.actor }}\n*Duration:* ${{ steps.deploy.outputs.duration || 'N/A' }}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack - Deployment Failed
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "danger",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":x: *Deployment Failed*\n*Title:* ${{ env.PR_TITLE || github.event.pull_request.title || 'Manual deployment' }}\n*Env:* ${{ env.ENVIRONMENT }}\n*Branch:* ${{ github.base_ref || github.ref_name }}\n*Triggered by:* ${{ github.actor }}\n\n*Error Log:*\n```${{ steps.deploy.outputs.error_log || 'No detailed error log available' }}```\n\nCheck the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for full details."
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Upload Deployment Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-logs-${{ env.ENVIRONMENT }}
          path: logs/
          retention-days: 30
          if-no-files-found: ignore

import markdown2
import tempfile
import os
from pathlib import Path
import datetime
from weasyprint import HTML, CSS

def markdown_to_pdf(markdown_content, output_path, template_path=None, watermark_text="QUANTUS", watermark_image_path=None, show_header_footer=True):
    """
    마크다운을 HTML로 변환 후 PDF로 출력 (워터마크 포함)
    
    Args:
        markdown_content: 마크다운 내용
        output_path: 출력 PDF 파일 경로
        template_path: 템플릿 파일 경로 (선택사항)
        watermark_text: 워터마크 텍스트
        watermark_image_path: 워터마크 이미지 경로 (선택사항)
        show_header_footer: 헤더/푸터 표시 여부
    """
    try:
        # 마크다운을 HTML로 변환
        html_content = markdown2.markdown(
            markdown_content,
            extras=[
                'tables',
                'fenced-code-blocks',
                'code-friendly',
                'cuddled-lists',
                'markdown-in-html',
                'task_list',
                'strike',
                'footnotes'
            ]
        )
        
        # GitHub 스타일 CSS + 워터마크 스타일
        github_css = """
        <style>
        /* 기본 스타일 */
        body {
            font-family: 'AppleGothic', 'Malgun Gothic', 'Nanum Gothic', -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
            line-height: 1.6;
            color: #24292e;
            max-width: 800px;
            margin: 0 auto;
            padding: 10px 20px;  /* 위아래 패딩 줄임 */
        }
        h1, h2, h3, h4, h5, h6 {
            margin-top: 24px;
            margin-bottom: 16px;
            font-weight: 600;
            line-height: 1.25;
        }
        h1 { font-size: 2em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }
        h2 { font-size: 1.5em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }
        h3 { font-size: 1.25em; }
        p { margin-bottom: 16px; }
        code {
            background-color: rgba(27,31,35,0.05);
            border-radius: 3px;
            font-size: 85%;
            margin: 0;
            padding: 0.2em 0.4em;
            font-family: 'Menlo', 'Monaco', 'SFMono-Regular', Consolas, 'Liberation Mono', monospace;
        }
        pre {
            background-color: #f6f8fa;
            border-radius: 3px;
            font-size: 85%;
            line-height: 1.45;
            overflow: auto;
            padding: 16px;
            margin-bottom: 16px;
        }
        pre code {
            background-color: transparent;
            border: 0;
            display: inline;
            line-height: inherit;
            margin: 0;
            overflow: visible;
            padding: 0;
            word-wrap: normal;
        }
        table {
            border-collapse: collapse;
            border-spacing: 0;
            width: 100%;
            margin-bottom: 16px;
        }
        table th, table td {
            border: 1px solid #dfe2e5;
            padding: 6px 13px;
        }
        table th {
            background-color: #f6f8fa;
            font-weight: 600;
        }
        blockquote {
            border-left: 4px solid #dfe2e5;
            color: #6a737d;
            margin: 0 0 16px 0;
            padding: 0 16px;
        }
        ul, ol {
            margin-bottom: 16px;
            padding-left: 2em;
        }
        li {
            margin-bottom: 0.25em;
        }
        
        /* 페이지 스타일 및 워터마크 */
        @page {
            size: A4;
            margin: 2cm 2cm 2cm 2cm;  /* 위쪽 여백만 줄임 */
            
            @top-left {
                content: url("file:///Users/admin/git/quantus-alpha/static/images/insight_logo.svg");
                width: 120px;
                height: auto;
            }
            @bottom-right {
                content: "Page " counter(page) " of " counter(pages);
                font-family: 'AppleGothic', 'Malgun Gothic', sans-serif;
                font-size: 9pt;
                color: #999;
            }
            @bottom-center {
                content: "Generated by Quantus";
                font-family: 'AppleGothic', 'Malgun Gothic', sans-serif;
                font-size: 8pt;
                color: #999;
            }
            @bottom-left {
                content: "https://insight.quantus.kr";
                font-family: 'AppleGothic', 'Malgun Gothic', sans-serif;
                font-size: 9pt;
                color: #999;
            }
        }
        
        /* 워터마크 오버레이 */
        .watermark {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-45deg);
            font-size: 48pt;
            color: rgba(0, 0, 0, 0.1);
            font-weight: bold;
            pointer-events: none;
            z-index: -1;
            user-select: none;
        }
        
        /* 이미지 워터마크 */
        .watermark-image {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            opacity: 0.1;
            pointer-events: none;
            z-index: -1;
            user-select: none;
            max-width: 1000px;
            max-height: 1000px;
        }
        
        /* 첫 페이지 특별 스타일 */
        @page :first {
            @top-left {
                content: url("file:///Users/admin/git/quantus-alpha/static/images/insight_logo.svg");
                width: 600px;
                height: auto;
                padding-top: 20px;
            }
        }
        </style>
        """
        
        # 워터마크 요소 생성
        watermark_html = ""
        if show_header_footer:
            # 기본적으로 SVG 로고 사용 시도
            default_logo_path = "file:///Users/admin/git/quantus-alpha/static/images/insight_logo.svg"
            watermark_html = f'<img src="{default_logo_path}" class="watermark-image" alt="Quantus Watermark">'
        
        # 완전한 HTML 문서 생성
        full_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            {github_css}
        </head>
        <body>
            {watermark_html}
            {html_content}
        </body>
        </html>
        """
        
        # HTML 파일도 함께 저장
        html_output_path = output_path.replace('.pdf', '.html')
        with open(html_output_path, 'w', encoding='utf-8') as f:
            f.write(full_html)
        print(f"HTML 파일 저장 완료: {html_output_path}")
        
        # HTML을 PDF로 변환
        HTML(string=full_html).write_pdf(output_path)
        
        print(f"마크다운 PDF 생성 완료: {output_path}")
        return output_path
        
    except Exception as e:
        print(f"PDF 생성 실패: {e}")
        return None

def create_simple_pdf(markdown_content, output_path):
    """
    가장 간단한 PDF 생성
    """
    return markdown_to_pdf(markdown_content, output_path)

def create_github_style_pdf(markdown_content, output_path, title="문서"):
    """
    GitHub 스타일 PDF 생성
    """
    return markdown_to_pdf(markdown_content, output_path)
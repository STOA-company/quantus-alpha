"""v21

Revision ID: 2c8daae59e05
Revises: 44c701c54ee9
Create Date: 2025-04-24 11:36:19.829892

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "2c8daae59e05"
down_revision: Union[str, None] = "44c701c54ee9"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "af_posts",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("content", mysql.LONGTEXT(), nullable=False),
        sa.Column("image_url", mysql.LONGTEXT(), nullable=True),
        sa.Column("image_format", sa.String(length=20), nullable=True),
        sa.Column("like_count", sa.Integer(), nullable=False, server_default="0"),
        sa.Column("user_id", sa.BigInteger(), nullable=True),
        sa.Column("depth", sa.Integer(), nullable=False, server_default="0", comment="게시글 깊이"),
        sa.Column("parent_id", sa.BigInteger(), nullable=True, comment="부모 게시글 ID"),
        sa.Column("category_id", sa.Integer(), nullable=True),
        sa.Column("tagging_post_id", sa.BigInteger(), nullable=True, comment="인용된 게시글 ID"),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["parent_id"], ["af_posts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_af_posts_category_id", "af_posts", ["category_id"], unique=False)
    op.create_index("idx_af_posts_created_at", "af_posts", ["created_at"], unique=False)
    op.create_index("idx_af_posts_like_count", "af_posts", ["like_count"], unique=False)
    op.create_index("idx_af_posts_user_id", "af_posts", ["user_id"], unique=False)
    op.create_table(
        "af_bookmarks",
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("post_id", sa.BigInteger(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.ForeignKeyConstraint(["post_id"], ["af_posts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "post_id"),
    )
    op.create_index("idx_af_bookmarks_user", "af_bookmarks", ["user_id"], unique=False)
    op.create_table(
        "af_post_likes",
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("post_id", sa.BigInteger(), nullable=False),
        sa.Column("is_liked", sa.Boolean(), nullable=False, server_default="1", comment="좋아요/싫어요 여부"),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.ForeignKeyConstraint(["post_id"], ["af_posts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "post_id"),
    )
    op.create_index("idx_af_post_likes_user", "af_post_likes", ["user_id"], unique=False)
    op.create_table(
        "af_post_stock_tags",
        sa.Column("post_id", sa.BigInteger(), nullable=False),
        sa.Column("stock_ticker", sa.String(length=20), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.ForeignKeyConstraint(["post_id"], ["af_posts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("post_id", "stock_ticker"),
    )
    op.create_index("idx_af_post_stock_tags_ticker", "af_post_stock_tags", ["stock_ticker"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_af_post_stock_tags_ticker", table_name="af_post_stock_tags")
    op.drop_table("af_post_stock_tags")
    op.drop_index("idx_af_post_likes_user", table_name="af_post_likes")
    op.drop_table("af_post_likes")
    op.drop_index("idx_af_bookmarks_user", table_name="af_bookmarks")
    op.drop_table("af_bookmarks")

    # Drop foreign key constraints first
    op.drop_constraint("af_posts_ibfk_1", "af_posts", type_="foreignkey")  # category_id foreign key
    op.drop_constraint("af_posts_ibfk_2", "af_posts", type_="foreignkey")  # parent_id foreign key

    # Then drop indexes
    op.drop_index("idx_af_posts_user_id", table_name="af_posts")
    op.drop_index("idx_af_posts_like_count", table_name="af_posts")
    op.drop_index("idx_af_posts_created_at", table_name="af_posts")
    op.drop_index("idx_af_posts_category_id", table_name="af_posts")

    # Finally drop the table
    op.drop_table("af_posts")
    # ### end Alembic commands ###

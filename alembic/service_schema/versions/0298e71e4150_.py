"""empty message

Revision ID: 0298e71e4150
Revises: 5c99928adff0
Create Date: 2025-03-20 14:22:21.460369

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision: str = "0298e71e4150"
down_revision: Union[str, None] = "5c99928adff0"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def table_exists(table_name):
    """테이블이 존재하는지 확인하는 함수"""
    conn = op.get_bind()
    inspector = inspect(conn)
    return table_name in inspector.get_table_names()


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # interest_group 테이블이 없을 경우에만 생성
    if not table_exists("interest_group"):
        op.create_table(
            "interest_group",
            sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
            sa.Column("name", sa.String(length=100), nullable=False),
            sa.Column("user_id", sa.BigInteger(), nullable=False),
            sa.Column(
                "created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True
            ),
            sa.Column(
                "updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True
            ),
            sa.ForeignKeyConstraint(["user_id"], ["alphafinder_user.id"], ondelete="CASCADE"),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("user_id", "name", name="uix_user_id_name"),
        )

    # user_stock_interest 테이블에 group_id 컬럼이 없으면 추가
    conn = op.get_bind()
    inspector = inspect(conn)
    columns = [col["name"] for col in inspector.get_columns("user_stock_interest")]

    if "group_id" not in columns:
        op.add_column("user_stock_interest", sa.Column("group_id", sa.BigInteger(), nullable=True))

    # 외래 키 먼저 삭제 (존재하는 경우만)
    try:
        op.drop_constraint("user_stock_interest_ibfk_1", "user_stock_interest", type_="foreignkey")
    except Exception as e:
        print(f"외래 키 삭제 중 오류 발생 (무시 가능): {e}")

    # 인덱스 삭제 (존재하는 경우만)
    try:
        op.drop_index("ix_user_stock_interest_user_id", table_name="user_stock_interest")
    except Exception as e:
        print(f"인덱스 삭제 중 오류 발생 (무시 가능): {e}")

    # 새 인덱스와 제약조건 생성
    # 인덱스가 없는 경우에만 생성
    if "group_id" in columns:
        indexes = [idx["name"] for idx in inspector.get_indexes("user_stock_interest")]
        if "ix_user_stock_interest_group_id" not in indexes:
            op.create_index(op.f("ix_user_stock_interest_group_id"), "user_stock_interest", ["group_id"], unique=False)

        # unique 제약조건이 없는 경우에만 생성
        constraints = [const["name"] for const in inspector.get_unique_constraints("user_stock_interest")]
        if "uix_group_id_ticker" not in constraints:
            op.create_unique_constraint("uix_group_id_ticker", "user_stock_interest", ["group_id", "ticker"])

    # 새 외래 키 생성
    try:
        op.create_foreign_key(None, "user_stock_interest", "interest_group", ["group_id"], ["id"], ondelete="CASCADE")
    except Exception as e:
        print(f"외래 키 생성 중 오류 발생 (무시 가능): {e}")

    # user_id 컬럼이 존재하는 경우에만 삭제
    if "user_id" in columns:
        op.drop_column("user_stock_interest", "user_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # 컬럼 존재 여부 확인
    conn = op.get_bind()
    inspector = inspect(conn)
    columns = [col["name"] for col in inspector.get_columns("user_stock_interest")]

    # user_id 컬럼이 없는 경우에만 추가
    if "user_id" not in columns:
        op.add_column("user_stock_interest", sa.Column("user_id", mysql.BIGINT(), autoincrement=False, nullable=True))

    # 기존 외래 키 삭제 (존재하는 경우만)
    try:
        op.drop_constraint(None, "user_stock_interest", type_="foreignkey")
    except Exception as e:
        print(f"외래 키 삭제 중 오류 발생 (무시 가능): {e}")

    # 외래 키 생성
    if "user_id" in columns:
        try:
            op.create_foreign_key(
                "user_stock_interest_ibfk_1",
                "user_stock_interest",
                "alphafinder_user",
                ["user_id"],
                ["id"],
                ondelete="CASCADE",
            )
        except Exception as e:
            print(f"외래 키 생성 중 오류 발생 (무시 가능): {e}")

    # unique 제약조건 삭제
    try:
        op.drop_constraint("uix_group_id_ticker", "user_stock_interest", type_="unique")
    except Exception as e:
        print(f"unique 제약조건 삭제 중 오류 발생 (무시 가능): {e}")

    # 인덱스 삭제
    try:
        op.drop_index(op.f("ix_user_stock_interest_group_id"), table_name="user_stock_interest")
    except Exception as e:
        print(f"인덱스 삭제 중 오류 발생 (무시 가능): {e}")

    # user_id 인덱스 생성
    if "user_id" in columns:
        indexes = [idx["name"] for idx in inspector.get_indexes("user_stock_interest")]
        if "ix_user_stock_interest_user_id" not in indexes:
            op.create_index("ix_user_stock_interest_user_id", "user_stock_interest", ["user_id"], unique=False)

    # group_id 컬럼이 존재하는 경우에만 삭제
    if "group_id" in columns:
        op.drop_column("user_stock_interest", "group_id")

    # interest_group 테이블이 존재하는 경우에만 삭제
    if table_exists("interest_group"):
        op.drop_table("interest_group")
    # ### end Alembic commands ###

version: '3.8'  # BuildKit 활성화 위해 버전 명시

services:
    nginx:
        image: nginx:latest
        ports:
            - "80:80"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx/conf.d:/etc/nginx/conf.d:ro
        depends_on:
            - web-blue
        networks:
            - alpha-network
        restart: unless-stopped

    web-blue:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: web-blue
        expose:
            - "8000"
        environment:
            ENV: ${ENV:-dev}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            APP_NAME: blue
        env_file:
            - .env
        volumes:
            - .:/app
            - pip-cache:/root/.cache/pip
            - poetry-cache:/var/cache/poetry
        depends_on:
            redis:
                condition: service_healthy
        networks:
            - alpha-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health-check"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        restart: unless-stopped

    web-green:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: web-green
        expose:
            - "8000"
        environment:
            ENV: ${ENV:-dev}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            APP_NAME: green
        env_file:
            - .env
        volumes:
            - .:/app
            - pip-cache:/root/.cache/pip
            - poetry-cache:/var/cache/poetry
        depends_on:
            redis:
                condition: service_healthy
        networks:
            - alpha-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health-check"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        profiles: ["manual"]
        restart: unless-stopped

    chat_worker:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: chat_worker
        command: poetry run celery -A app.modules.chat.worker worker --loglevel=info -Q chat_queue
        environment:
            ENV: ${ENV:-dev}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            LLM_MOCK_ENABLED: "true"
        env_file:
            - .env
        volumes:
            - .:/app
            - pip-cache:/root/.cache/pip
            - poetry-cache:/var/cache/poetry
        depends_on:
            redis:
                condition: service_healthy
        networks:
            - alpha-network
        restart: unless-stopped

    redis:
        image: redis:7-alpine
        ports:
            - "127.0.0.1:6379:6379"
        volumes:
            - redis_data:/data
        command: >
          redis-server
          --requirepass ${REDIS_PASSWORD}
          --appendonly yes
          --protected-mode no
          --replicaof no one
          --rename-command REPLICAOF ""
          --rename-command SLAVEOF ""
          --maxmemory 256mb
          --maxmemory-policy allkeys-lru
          --tcp-keepalive 60
          --timeout 300
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
            interval: 5s
            timeout: 10s
            retries: 10
            start_period: 5s
        networks:
            - alpha-network
        restart: always
        deploy:
            resources:
                limits:
                    memory: 300M

    # Prometheus - 메트릭 수집기
    prometheus:
        image: prom/prometheus:latest
        volumes:
            - ./prometheus:/etc/prometheus
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        ports:
            - "9090:9090"
        networks:
            - alpha-network
        restart: unless-stopped

    # Grafana - 대시보드
    grafana:
        image: grafana/grafana:latest
        volumes:
            - grafana_data:/var/lib/grafana
            - ./grafana/provisioning:/etc/grafana/provisioning
            - ./grafana/dashboards:/var/lib/grafana/dashboards
            - ./grafana/provisioning/plugins:/etc/grafana/provisioning/plugins
            - ./grafana/provisioning/alerting:/etc/grafana/provisioning/alerting
        environment:
            - GF_SERVER_SERVE_FROM_SUB_PATH=true
            - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana
            - GF_SERVER_PROTOCOL=http
            - GF_SERVER_DOMAIN=${DOMAIN}
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
            - GF_SERVER_ENFORCE_DOMAIN=false
        ports:
            - "3000:3000"
        networks:
            - alpha-network
        depends_on:
            - prometheus
        restart: unless-stopped

    # Node-Exporter - 호스트 시스템 모니터링
    node_exporter:
        image: prom/node-exporter:latest
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
        ports:
            - "9100:9100"
        networks:
            - alpha-network
        restart: unless-stopped

    # cAdvisor - 컨테이너 모니터링
    cadvisor:
        image: gcr.io/cadvisor/cadvisor:latest
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:ro
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
        ports:
            - "8080:8080"
        networks:
            - alpha-network
        restart: unless-stopped

    # Nginx-Exporter - Nginx 모니터링
    nginx_exporter:
        image: nginx/nginx-prometheus-exporter:latest
        command:
            - '-nginx.scrape-uri=http://nginx/stub_status'
        ports:
            - "9113:9113"
        networks:
            - alpha-network
        depends_on:
            - nginx
        restart: unless-stopped

    # Blackbox-Exporter - 엔드포인트 모니터링
    blackbox_exporter:
        image: prom/blackbox-exporter:latest
        volumes:
            - ./blackbox:/etc/blackbox_exporter
        command:
            - '--config.file=/etc/blackbox_exporter/blackbox.yml'
        ports:
            - "9115:9115"
        networks:
            - alpha-network
        restart: unless-stopped

volumes:
    redis_data:
    pip-cache:    # pip 캐시를 위한 볼륨
    poetry-cache: # poetry 캐시를 위한 볼륨
    prometheus_data: # Prometheus 데이터를 위한 볼륨
    grafana_data:    # Grafana 데이터를 위한 볼륨

networks:
    alpha-network:
        driver: bridge

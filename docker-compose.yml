version: '3.8'  # BuildKit 활성화 위해 버전 명시

services:
    nginx:
        image: nginx:latest
        ports:
            - "80:80"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx/conf.d:/etc/nginx/conf.d:ro
        depends_on:
            - web-blue
        networks:
            - alpha-network
        restart: unless-stopped

    web-blue:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: web-blue
        expose:
            - "8000"
        environment:
            ENV: ${ENV:-dev}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            APP_NAME: blue
        env_file:
            - .env
        volumes:
            - .:/app
            - pip-cache:/root/.cache/pip
            - poetry-cache:/var/cache/poetry
        depends_on:
            redis:
                condition: service_healthy
        networks:
            - alpha-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health-check"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        restart: unless-stopped

    web-green:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: web-green
        expose:
            - "8000"
        environment:
            ENV: ${ENV:-dev}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            APP_NAME: green
            LLM_MOCK_ENABLED: "true"
        env_file:
            - .env
        volumes:
            - .:/app
            - pip-cache:/root/.cache/pip
            - poetry-cache:/var/cache/poetry
        depends_on:
            redis:
                condition: service_healthy
        networks:
            - alpha-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health-check"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        profiles: ["manual"]
        restart: unless-stopped

    redis:
        image: redis:7-alpine
        ports:
            - "127.0.0.1:6379:6379"
        volumes:
            - redis_data:/data
        command: >
          redis-server
          --requirepass ${REDIS_PASSWORD}
          --appendonly yes
          --protected-mode no
          --replicaof no one
          --rename-command REPLICAOF ""
          --rename-command SLAVEOF ""
          --maxmemory 256mb
          --maxmemory-policy allkeys-lru
          --tcp-keepalive 60
          --timeout 300
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
            interval: 5s
            timeout: 10s
            retries: 10
            start_period: 5s
        networks:
            - alpha-network
        restart: always
        deploy:
            resources:
                limits:
                    memory: 300M

    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
        networks:
            - alpha-network
        restart: unless-stopped

    nginx-exporter:
        image: nginx/nginx-prometheus-exporter:latest
        container_name: nginx-exporter
        command:
            - '-nginx.scrape-uri=http://nginx/nginx_status'
        ports:
            - "9113:9113"
        depends_on:
            - nginx
        networks:
            - alpha-network
        restart: unless-stopped

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
            - "3000:3000"
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
            - GF_USERS_ALLOW_SIGN_UP=false
        volumes:
            - grafana_data:/var/lib/grafana
        depends_on:
            - prometheus
        networks:
            - alpha-network
        restart: unless-stopped

volumes:
    grafana_data:
    redis_data:
    prometheus_data:  # Prometheus 데이터를 위한 볼륨
    pip-cache:    # pip 캐시를 위한 볼륨
    poetry-cache: # poetry 캐시를 위한 볼륨

networks:
    alpha-network:
        driver: bridge

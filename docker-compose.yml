version: '3.8'  # BuildKit 활성화 위해 버전 명시

services:
    nginx:
        image: nginx:latest
        ports:
            - "80:80"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx/conf.d:/etc/nginx/conf.d:ro
        depends_on:
            - web-blue
        networks:
            - alpha-network
        restart: unless-stopped

    web-blue:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: web-blue
        expose:
            - "8000"
        environment:
            ENV: ${ENV:-dev}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            APP_NAME: blue
            RABBITMQ_HOST: rabbitmq
            RABBITMQ_PORT: 5672
            RABBITMQ_USER: admin
            RABBITMQ_PASSWORD: admin123
        env_file:
            - .env
        volumes:
            - .:/app
            - pip-cache:/root/.cache/pip
            - poetry-cache:/var/cache/poetry
        depends_on:
            redis:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - alpha-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health-check"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        restart: unless-stopped

    web-green:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: web-green
        expose:
            - "8000"
        environment:
            ENV: ${ENV:-dev}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            APP_NAME: green
            RABBITMQ_HOST: rabbitmq
            RABBITMQ_PORT: 5672
            RABBITMQ_USER: admin
            RABBITMQ_PASSWORD: admin123
            LLM_MOCK_ENABLED: "true"
        env_file:
            - .env
        volumes:
            - .:/app
            - pip-cache:/root/.cache/pip
            - poetry-cache:/var/cache/poetry
        depends_on:
            redis:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - alpha-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health-check"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        profiles: ["manual"]
        restart: unless-stopped

    chat_worker:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: chat_worker
        command: poetry run python -m app.modules.chat.run_worker
        environment:
            ENV: ${ENV:-dev}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            LLM_MOCK_ENABLED: "true"
            RABBITMQ_HOST: rabbitmq
            RABBITMQ_PORT: 5672
            RABBITMQ_USER: admin
            RABBITMQ_PASSWORD: admin123
        env_file:
            - .env
        volumes:
            - .:/app
            - pip-cache:/root/.cache/pip
            - poetry-cache:/var/cache/poetry
        depends_on:
            redis:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - alpha-network
        restart: unless-stopped

    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        ports:
            - "5672:5672"   # AMQP 프로토콜 포트
            - "15672:15672" # 관리 웹 인터페이스 포트
        environment:
            - RABBITMQ_DEFAULT_USER=admin
            - RABBITMQ_DEFAULT_PASS=admin123
        healthcheck:
            test: ["CMD", "rabbitmqctl", "status"]
            interval: 10s
            timeout: 5s
            retries: 5
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        networks:
            - alpha-network
        restart: unless-stopped

    redis:
        image: redis:7-alpine
        ports:
            - "127.0.0.1:6379:6379"
        volumes:
            - redis_data:/data
        command: >
          redis-server
          --requirepass ${REDIS_PASSWORD}
          --appendonly yes
          --protected-mode no
          --replicaof no one
          --rename-command REPLICAOF ""
          --rename-command SLAVEOF ""
          --maxmemory 256mb
          --maxmemory-policy allkeys-lru
          --tcp-keepalive 60
          --timeout 300
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
            interval: 5s
            timeout: 10s
            retries: 10
            start_period: 5s
        networks:
            - alpha-network
        restart: always
        deploy:
            resources:
                limits:
                    memory: 300M

volumes:
    redis_data:
    pip-cache:    # pip 캐시를 위한 볼륨
    poetry-cache: # poetry 캐시를 위한 볼륨
    rabbitmq_data: # RabbitMQ 데이터를 위한 볼륨

networks:
    alpha-network:
        driver: bridge
